name: Deploy to Production

on:
  push:
    branches: [ main ]

jobs:
#   test:
#     runs-on: ubuntu-latest
#     defaults:
#       run:
#         working-directory: ./front-project
    
#     steps:
#     - uses: actions/checkout@v4
    
#     - name: Install pnpm
#       uses: pnpm/action-setup@v4
#       with:
#         version: 9
    
#     - name: Setup Node.js
#       uses: actions/setup-node@v4
#       with:
#         node-version: '20'
#         cache: 'pnpm'
#         cache-dependency-path: './front-project/pnpm-lock.yaml'
    
#     - name: Install dependencies
#       run: |
#         if ! pnpm install --frozen-lockfile; then
#           echo "❌ Frozen lockfile failed, regenerating lockfile..."
#           pnpm install
#         fi
    
#     - name: Run tests
#       run: pnpm run test:unit
    
#     - name: Run linting
#       run: pnpm run lint

  build-and-deploy:
    # needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: ./front-project
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'pnpm'
        cache-dependency-path: './front-project/pnpm-lock.yaml'
    
    - name: Install dependencies
      run: |
        if ! pnpm install --frozen-lockfile; then
          echo "❌ Frozen lockfile failed, regenerating lockfile..."
          pnpm install
        fi
    
    - name: Build application
      run: pnpm run build
      env:
        NODE_ENV: production
        VITE_API_URL: https://fakestoreapi.com
    
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.2.0
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.PRIVATE_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        timeout: 60s
        command_timeout: 5m
        script: |
          set -e
          echo "🚀 Début du déploiement..."
          echo "📍 Serveur: $(hostname)"
          echo "👤 Utilisateur: $(whoami)"
          echo "📁 Répertoire de travail: $(pwd)"
          
          # Configurer git safe directory dès le début
          echo "🔧 Configuration de git safe directory..."
          git config --global --add safe.directory /var/www/project-web-app || true
          
          # Vérifier que le répertoire existe
          if [ ! -d "/var/www/project-web-app" ]; then
            echo "❌ Répertoire /var/www/project-web-app non trouvé"
            echo "📝 Création du répertoire..."
            sudo mkdir -p /var/www/project-web-app
            sudo chown $(whoami):$(whoami) /var/www/project-web-app
            
            echo "📥 Clonage initial du repository..."
            cd /var/www
            git clone https://github.com/SlyCatDev/project-web-app.git
            
            # Ajuster les permissions après le clonage
            sudo chown -R $(whoami):$(whoami) /var/www/project-web-app
          else
            echo "📁 Répertoire existant trouvé"
            # Corriger les permissions du répertoire existant
            echo "🔧 Correction des permissions..."
            sudo chown -R $(whoami):$(whoami) /var/www/project-web-app
            sudo chmod -R u+rwX /var/www/project-web-app
          fi
          
          cd /var/www/project-web-app
          
          # Vérifier les permissions git avant le pull
          echo "🔍 Vérification des permissions git..."
          if [ ! -w ".git/FETCH_HEAD" ] 2>/dev/null; then
            echo "🔧 Correction des permissions git..."
            sudo chown -R $(whoami):$(whoami) .git/
            sudo chmod -R u+rwX .git/
          fi
          
          echo "📥 Mise à jour du code..."
          git pull origin main
          
          cd front-project
          echo "📦 Installation de pnpm..."
          if ! command -v pnpm &> /dev/null; then
            npm install -g pnpm@9
          fi
          
          echo "📚 Installation des dépendances..."
          pnpm install --frozen-lockfile
          
          echo "🏗️  Construction de l'application..."
          NODE_ENV=production VITE_API_URL=https://fakestoreapi.com pnpm run build
          
          echo "🔄 Rechargement de Nginx..."
          sudo systemctl reload nginx
          
          echo "✅ Déploiement terminé avec succès !"
          echo "🌐 L'application peut maintenant accéder à l'API FakeStore"
          echo "📍 URL: http://$(curl -s ifconfig.me 2>/dev/null || echo 'votre-serveur')"
